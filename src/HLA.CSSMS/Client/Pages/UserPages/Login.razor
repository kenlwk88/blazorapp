@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavManager

<PageTitle>Login</PageTitle>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
@if (ShowLoading)
{
    <div>
        <span class="loading"></span>
    </div>
}

<div style="visibility:@hideLogin">
    <EditForm Model="loginDto" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <div class="mb-3 ">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginDto.Email" class="form-control" style="width:30%" />
            <ValidationMessage For="@(() => loginDto.Email)" />
        </div>
        <div class="mb-3">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="loginDto.Password" class="form-control" type="password" style="width:30%" />
            <ValidationMessage For="@(() => loginDto.Password)" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</div>
@code {
    private LoginDto loginDto = new LoginDto();
    private bool ShowErrors;
    private string Error = "";
    private bool ShowLoading = false;
    private string hideLogin = isShowLogin(true);
    bool isShow;

    private async Task HandleLogin()
    {
        ShowErrors = false;

        ShowLoading = true;
        hideLogin = isShowLogin(false);
        var result = await AuthService.Login(loginDto);

        if (result.Success)
        {
            var returnUrl = NavManager.QueryString("returnUrl") ?? "/";
            NavManager.NavigateTo(returnUrl);
        }
        else
        {
            ShowLoading = false;
            hideLogin = isShowLogin(true);
            ShowErrors = true;
            Error = result.Message;
        }
    }
    private static string isShowLogin(bool isShow)
    {
        if (isShow)
            return "visible";
        return "hidden";
    }
}
